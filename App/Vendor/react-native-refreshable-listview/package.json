{
  "_args": [
    [
      "react-native-refreshable-listview@https://registry.npmjs.org/react-native-refreshable-listview/-/react-native-refreshable-listview-1.3.0.tgz",
      "/Users/jeremyeaton/projects/taskrabbit/tasker"
    ]
  ],
  "_from": "react-native-refreshable-listview@1.3.0",
  "_id": "react-native-refreshable-listview@1.3.0",
  "_inCache": true,
  "_location": "/react-native-refreshable-listview",
  "_phantomChildren": {},
  "_requested": {
    "name": "react-native-refreshable-listview",
    "raw": "react-native-refreshable-listview@https://registry.npmjs.org/react-native-refreshable-listview/-/react-native-refreshable-listview-1.3.0.tgz",
    "rawSpec": "https://registry.npmjs.org/react-native-refreshable-listview/-/react-native-refreshable-listview-1.3.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/react-native-refreshable-listview/-/react-native-refreshable-listview-1.3.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-refreshable-listview/-/react-native-refreshable-listview-1.3.0.tgz",
  "_shasum": "d31b3c8535a38947c3073bc4b026f5bb9bcdd9f1",
  "_shrinkwrap": null,
  "_spec": "react-native-refreshable-listview@https://registry.npmjs.org/react-native-refreshable-listview/-/react-native-refreshable-listview-1.3.0.tgz",
  "_where": "/Users/jeremyeaton/projects/taskrabbit/tasker",
  "author": {
    "email": "james@jsdf.co",
    "name": "James Friend",
    "url": "http://jsdf.co/"
  },
  "bugs": {
    "url": "https://github.com/jsdf/react-native-refreshable-listview/issues"
  },
  "dependencies": {
    "is-promise": "^2.0.0"
  },
  "description": "A pull-to-refresh ListView which shows a loading spinner while your data reloads",
  "devDependencies": {
    "absolute-path": "0.0.0",
    "babel-core": "^5.2.15",
    "eslint": "^0.19.0",
    "eslint-plugin-react": "^2.1.1",
    "jasmine-object-matchers-jest": "^0.1.0",
    "jest-cli": "^0.4.1",
    "react": "^0.13.1",
    "source-map-support": "^0.2.10",
    "xtend": "^4.0.0"
  },
  "homepage": "https://github.com/jsdf/react-native-refreshable-listview",
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "es6"
    ],
    "scriptPreprocessor": "<rootDir>/test/support/preprocessor.js",
    "setupEnvScriptFile": "<rootDir>/node_modules/babel-core/browser-polyfill.js",
    "setupTestFrameworkScriptFile": "<rootDir>/test/support/setupTestFramework.js",
    "testFileExtensions": [
      "es6",
      "js"
    ],
    "unmockedModulePathPatterns": [
      "<rootDir>/test/support",
      "<rootDir>/node_modules/react",
      "<rootDir>/node_modules/babel-core",
      "<rootDir>/node_modules/source-map-support",
      "<rootDir>/node_modules/absolute-path",
      "<rootDir>/node_modules/xtend",
      "<rootDir>/node_modules/jasmine-object-matchers-jest",
      "<rootDir>/node_modules/is-promise"
    ]
  },
  "keywords": [
    "react",
    "react-native",
    "react-component",
    "react-native-component",
    "mobile",
    "ui"
  ],
  "license": "ISC",
  "main": "index.js",
  "name": "react-native-refreshable-listview",
  "optionalDependencies": {},
  "readme": "# React Native RefreshableListView\nA pull-to-refresh ListView which shows a loading spinner while your data reloads\n\nIn action (from [ReactNativeHackerNews](https://github.com/jsdf/ReactNativeHackerNews)):\n\n![React Native Hacker News](http://i.imgur.com/gVmrxDe.png)\n\n## Usage\n\n### Example\n\n```js\nvar React = require('react-native')\nvar {Text, View, ListView} = React\nvar RefreshableListView = require('react-native-refreshable-listview')\n\nvar ArticleStore = require('../stores/ArticleStore')\nvar StoreWatchMixin = require('./StoreWatchMixin')\nvar ArticleView = require('./ArticleView')\n\nvar ds = new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2}) // assumes immutable objects\n\nvar ArticlesScreen = React.createClass({\n  mixins: [StoreWatchMixin],\n  getInitialState() {\n    return {dataSource: ds.cloneWithRows(ArticleStore.all())}\n  },\n  getStoreWatches() {\n    this.watchStore(ArticleStore, () => {\n      this.setState({dataSource: ds.cloneWithRows(ArticleStore.all())})\n    })\n  },\n  reloadArticles() {\n    return ArticleStore.reload() // returns a Promise of reload completion\n  },\n  renderArticle(article) {\n    return <ArticleView article={article} />\n  },\n  render() {\n    return (\n      <RefreshableListView\n        dataSource={this.state.dataSource}\n        renderRow={this.renderArticle}\n        loadData={this.reloadArticles}\n        refreshDescription=\"Refreshing articles\"\n      />\n    )\n  }\n})\n```\n\n### RefreshableListView\nReplace a ListView with a RefreshableListView to add pulldown-to-refresh \nfunctionality. Accepts the same props as ListView (except `renderHeader`, see below), with a few extras.\n\n#### Props\n\n- `loadData: func.isRequired`\n  A function returning a Promise or taking a callback, invoked upon pulldown. \n  The refreshing indicator (spinner) will show until the Promise resolves or the callback \n  is called.\n- `refreshDescription: oneOfType([string, element])`\n  Text/element to show alongside spinner. If a custom \n  `refreshingIndictatorComponent` is used this value will be passed as its \n  `description` prop.\n- `refreshingIndictatorComponent: oneOfType([func, element])`\n  Content to show in list header when refreshing. Can be a component class or \n  instantiated element. Defaults to `RefreshableListView.RefreshingIndicator`.\n  You can easily customise the appearance of the indicator by passing in a\n  customised `<RefreshableListView.RefreshingIndicator />`, or provide your own\n  entirely custom content to be displayed.\n- `minDisplayTime: number`\n  Minimum time the spinner will show for.\n- `minBetweenTime: number`\n  Minimum time after a refresh before another refresh can be performed.\n- `minPulldownDistance: number`\n  Minimum distance (in px) which the list has to be scrolled off the top to \n  trigger a refresh.\n- `ignoreInertialScroll: bool`\n  Require the user to be actually touching the screen when the pulldown distance \n  exceeds `minPulldownDistance` to trigger a refresh (eg. not just inertially \n  scrolling off the top). Defaults to `true`.\n- `onScroll: func`\n  An event handler for the `onScroll` event which will be chained after the one\n  defined by the `RefreshableListView`.\n- `renderHeaderWrapper: func`\n  A function to render content in the header, which will always be rendered \n  (regardless of 'refreshing' status). **IMPORTANT:** The first argument passed \n  to this function is the refresh indicator. You **must** render this within \n  your custom header for the spinner to appear. See the \n  [example](example/renderHeaderWrapper.js).\n- `renderHeader: func`\n  **Deprecated** - use `renderHeaderWrapper` instead.\n- `scrollEventThrottle: number`\n  How often `ListView` produces scroll events, in ms. Defaults to a fairly low \n  value, try setting it higher if you encounter performance issues. Keep in mind\n  that a higher value will make the pulldown-to-refresh behaviour less responsive.\n\n### RefreshableListView.RefreshingIndicator\nComponent with activity indicator to be displayed in list header when refreshing.\n\n#### Props\n\n- `description: oneOfType([string, element])`\n  Text/element to show alongside spinner.\n- `stylesheet: object`\n  A stylesheet object which overrides one or more of the styles defined in the \n  [RefreshingIndicator stylesheet](lib/RefreshingIndicator.js).\n- `activityIndicatorComponent: oneOfType([func, element])`\n  The spinner to display. Defaults to `<ActivityIndicatorIOS />`.\n\n### ControlledRefreshableListView\nLow level component used by `RefreshableListView`. Use this directly if you want \nto manually control the refreshing status (rather than using a Promise).\n\n#### Props\n- `onRefresh: func.isRequired`\n  Called when user pulls listview down to refresh.\n- `isRefreshing: bool.isRequired`\n  Whether or not to show the refreshing indicator.\n- `refreshDescription: oneOfType([string, element])`\n  *See `RefreshableListView`*\n- `refreshingIndictatorComponent: oneOfType([func, element])`\n  *See `RefreshableListView`*\n- `minPulldownDistance: number`\n  *See `RefreshableListView`*\n- `ignoreInertialScroll: bool`\n  *See `RefreshableListView`*\n- `onScroll: func`\n  *See `RefreshableListView`*\n- `renderHeaderWrapper: func`\n  *See `RefreshableListView`*\n- `renderHeader: func`\n  **Deprecated** - use `renderHeaderWrapper` instead.\n- `scrollEventThrottle: number`\n  *See `RefreshableListView`*\n\n### RefreshableListView.DataSource, ControlledRefreshableListView.DataSource\nAlias of `ListView.DataSource`, for convenience.\n\n## Customising the refresh indicator (spinner)\n\n### Style the default RefreshingIndicator\n```js\nvar indicatorStylesheet = StyleSheet.create({\n  wrapper: {\n    backgroundColor: 'red',\n    height: 60,\n    marginTop: 10,\n  },\n  content: {\n    backgroundColor: 'blue',\n    marginTop: 10,\n    height: 60,\n  },\n})\n\n<RefreshableListView\n  refreshingIndictatorComponent={\n    <RefreshableListView.RefreshingIndicator stylesheet={indicatorStylesheet} />\n  }\n/>\n```\n\n### Provide a custom RefreshingIndicator\n\n```js\nvar MyRefreshingIndicator = React.createClass({\n  render() {\n    return (\n      <View>\n        <MySpinner />\n        <Text>{this.props.description}</Text>\n      </View>\n    )\n  },\n})\n\n<RefreshableListView refreshingIndictatorComponent={MyRefreshingIndicator} />\n// or\n<RefreshableListView refreshingIndictatorComponent={<MyRefreshingIndicator />} />\n```\n\n### changelog\n\n- **1.2.0**\n  - deprecated `renderHeader` in favour of `renderHeaderWrapper` as some \n  developers seemed to be confused by the fact that a `renderHeader` handler \n  for a standard `ListView` will not automatically *just work* with this component,\n  but rather needs to be modified as described in the documentation. The new prop\n  `renderHeaderWrapper` works identically to the previous one, however hopefully\n  now it is named differently it will be more apparent that its behaviour is not\n  the same as with `ListView`. The `renderHeader` prop will be removed in 2.0.\n- **1.1.0**\n  - added behaviour to ignore inertial scrolling (@dhrrgn)\n  - exposed props: ignoreInertialScroll, scrollEventThrottle\n- **1.0.0**\n  - Split RefreshableListView into 3 parts: \n    - RefreshableListView handles 'refreshing' state by invoking 'loadData' \n      callback and waiting for resolution.\n    - ControlledRefreshableListView handles rendering of ListView header, \n      depending on isRefreshing prop. Calls onRefresh handler when \n      pulldown-to-refresh scroll motion occurs.\n    - RefreshingIndicator is the component rendered in the header of the \n      ListView when refreshing. Pass in a customised version of this (or a \n      completely different component) to RefreshableListView or \n      ControlledRefreshableListView if you want to customise refresh indicator \n      appearance.\n  - Added Jest unit tests\n- **0.3.0** added minPulldownTime & minBetweenTime props, fixed bug where \n  refresh could happen twice\n- **0.2.0** added support for ListView props setNativeProps and \n  getScrollResponder (@almost & @sscotth)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/jsdf/react-native-refreshable-listview.git"
  },
  "scripts": {
    "jest": "BABEL_JEST_STAGE=0 jest $JEST_ARGS",
    "lint": "eslint .",
    "test": "npm run lint && npm run jest"
  },
  "version": "1.3.0"
}
